syntax = "proto3";
package windexer;

service Windexer {
  rpc GetSlot (GetSlotRequest) returns (GetSlotResponse);
  rpc GetBlock (GetBlockRequest) returns (GetBlockResponse);
  rpc GetAccount (GetAccountRequest) returns (GetAccountResponse);
  rpc GetTransaction (GetTransactionRequest) returns (GetTransactionResponse);
  rpc SendTransaction (SendTransactionRequest) returns (SendTransactionResponse);
  rpc GetCompressedAccount (GetCompressedAccountRequest) returns (GetCompressedAccountResponse);
  rpc GetCompressedBalance (GetCompressedBalanceRequest) returns (GetCompressedBalanceResponse);
  rpc GetCompressedTokenAccountBalance (GetCompressedTokenAccountBalanceRequest) returns (GetCompressedTokenAccountBalanceResponse);
  rpc GetCompressedTokenAccountsByOwner (GetCompressedTokenAccountsByOwnerRequest) returns (GetCompressedTokenAccountsByOwnerResponse);
  rpc GetTransactionWithCompressionInfo (GetTransactionRequest) returns (GetTransactionWithCompressionInfoResponse);
}

message GetSlotRequest {}

message GetSlotResponse {
  uint64 slot = 1;
}

message GetBlockRequest {
  uint64 slot = 1;
}

message GetBlockResponse {
  EncodedConfirmedBlock block = 1;
}

message GetAccountRequest {
  string pubkey = 1;
}

message GetAccountResponse {
  uint64 lamports = 1;
  string owner = 2;
  bool executable = 3;
  uint64 rent_epoch = 4;
  bytes data = 5;
}

message GetTransactionRequest {
  string signature = 1;
}

message GetTransactionResponse {
  EncodedConfirmedTransaction transaction = 1;
}

message SendTransactionRequest {
  bytes transaction = 1;
}

message SendTransactionResponse {
  string signature = 1;
}

message GetCompressedAccountRequest {
  string pubkey = 1;
}

message GetCompressedAccountResponse {
  CompressedAccount account = 1;
}

message GetCompressedBalanceRequest {
  string pubkey = 1;
}

message GetCompressedBalanceResponse {
  uint64 balance = 1;
}

message GetCompressedTokenAccountBalanceRequest {
  string pubkey = 1;
}

message GetCompressedTokenAccountBalanceResponse {
  string amount = 1;
  uint32 decimals = 2;
}

message GetCompressedTokenAccountsByOwnerRequest {
  string owner = 1;
  RpcTokenAccountsFilter filter = 2;
}

message GetCompressedTokenAccountsByOwnerResponse {
  repeated CompressedTokenAccount accounts = 1;
}

message GetTransactionWithCompressionInfoResponse {
  TransactionWithCompressionInfo transaction_with_compression_info = 1;
}

message EncodedConfirmedBlock {
  string previous_blockhash = 1;
  string blockhash = 2;
  uint64 parent_slot = 3;
  repeated EncodedConfirmedTransaction transactions = 4;
  repeated Reward rewards = 5;
  uint64 block_time = 6;
  uint64 block_height = 7;
}

message EncodedConfirmedTransaction {
  EncodedTransaction transaction = 1;
  TransactionStatusMeta meta = 2;
}

message EncodedTransaction {
  oneof encoded_transaction {
    JsonEncodedTransaction json = 1;
    BinaryEncodedTransaction binary = 2;
    bytes legacy_binary = 3;
    AccountKeys accounts = 4;
  }
}

message JsonEncodedTransaction {
  repeated string signatures = 1;
  UiMessage message = 2;
}

message BinaryEncodedTransaction {
  bytes data = 1;
  int32 encoding = 2;
}

message AccountKeys {
  repeated string account_keys = 1;
}

message UiMessage {
  MessageHeader header = 1;
  repeated string account_keys = 2;
  string recent_blockhash = 3;
  repeated UiInstruction instructions = 4;
}

message MessageHeader {
  uint32 num_required_signatures = 1;
  uint32 num_readonly_signed_accounts = 2;
  uint32 num_readonly_unsigned_accounts = 3;
}

message UiInstruction {
  oneof instruction {
    ParsedInstruction parsed = 1;
    CompiledInstruction compiled = 2;
  }
}

message ParsedInstruction {
  string program = 1;
  string program_id = 2;
  string parsed = 3;
}

message CompiledInstruction {
  uint32 program_id_index = 1;
  repeated uint32 accounts = 2;
  bytes data = 3;
}

message TransactionStatusMeta {
  TransactionStatus status = 1;
  uint64 fee = 2;
  repeated uint64 pre_balances = 3;
  repeated uint64 post_balances = 4;
  InnerInstructions inner_instructions = 5;
  repeated string log_messages = 6;
  repeated UiTokenBalance pre_token_balances = 7;
  repeated UiTokenBalance post_token_balances = 8;
  repeated Reward rewards = 9;
}

message TransactionStatus {
  oneof status {
    bool ok = 1;
    string err = 2;
  }
}

message InnerInstructions {
  repeated InnerInstruction instructions = 1;
}

message InnerInstruction {
  uint32 index = 1;
  repeated CompiledInstruction instructions = 2;
}

message UiTokenBalance {
  uint32 account_index = 1;
  string mint = 2;
  string owner = 3;
  UiTokenAmount ui_token_amount = 4;
}

message UiTokenAmount {
  double ui_amount = 1;
  uint32 decimals = 2;
  string amount = 3;
  string ui_amount_string = 4;
}

message Reward {
  string pubkey = 1;
  int64 lamports = 2;
  uint64 post_balance = 3;
  int32 reward_type = 4;
  uint32 commission = 5;
}

message CompressedAccount {
  string pubkey = 1;
  uint64 lamports = 2;
  bytes data = 3;
  string owner = 4;
  bool executable = 5;
  uint64 rent_epoch = 6;
}

message CompressedTokenAccount {
  string pubkey = 1;
  CompressedAccount account = 2;
  string amount = 3;
  uint32 decimals = 4;
}

message RpcTokenAccountsFilter {
  oneof filter_type {
    Pubkey mint = 1;
    Pubkey program_id = 2;
  }
}

message Pubkey {
  bytes data = 1;
}

message TransactionWithCompressionInfo {
  EncodedConfirmedTransaction transaction = 1;
  CompressionInfo compression_info = 2;
}

message CompressionInfo {
  repeated CompressedAccount compressed_accounts = 1;
  repeated CompressedAccount decompressed_accounts = 2;
}